import telebot
from telebot import types
import os
from datetime import datetime

TOKEN = "7633787635:AAEoRpWKCjCt0RUpwoYB8tqoqEeDddUMJuM"
bot = telebot.TeleBot(TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
admins = {5679626874: {"name": "–í–ª–∞–¥–µ–ª–µ—Ü", "added_at": datetime.now().strftime("%d.%m.%Y %H:%M")}}
orders = {}
password = "s1kauzb"
app_file = r"C:\Users\PC\Downloads\GFX Tool for Standoff 2_2.0_APKPure.rar"
admin_history = []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
if not os.path.exists(app_file):
    print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª APK –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit()

# ======================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ======================

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å GFX Tool")
    markup.add(btn)
    
    bot.send_message(
        message.chat.id,
        "üîπ <b>GFX Tool –¥–ª—è Standoff 2</b> üîπ\n"
        "–ü–æ–≤—ã—à–µ–Ω–∏–µ FPS | –£–ª—É—á—à–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda m: m.text == "üì≤ –ü–æ–ª—É—á–∏—Ç—å GFX Tool")
def request_gfx(message):
    user = message.from_user
    user_name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
    user_tag = f"@{user.username}" if user.username else f"ID:{user.id}"
    
    orders[user.id] = {
        'status': '–æ–∂–∏–¥–∞–µ—Ç',
        'username': user_tag,
        'name': user_name,
        'date': datetime.now().strftime("%d.%m.%Y %H:%M")
    }
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in admins:
        bot.send_message(
            admin_id,
            f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user_name} ({user_tag})</b>\n"
            f"üìÖ –î–∞—Ç–∞: {orders[user.id]['date']}\n"
            f"üÜî ID: <code>{user.id}</code>\n\n"
            f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å: /approve_{user.id}\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å: /reject_{user.id}",
            parse_mode='HTML'
        )
    
    bot.reply_to(message, "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# ======================
# –ê–î–ú–ò–ù-–°–ò–°–¢–ï–ú–ê
# ======================

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id not in admins:
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", callback_data="show_requests"),
        types.InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_history")
    )
    
    admin_list = "\n".join(
        f"{data['name']} (ID: {admin_id}) - {data['added_at']}"
        for admin_id, data in admins.items()
    )
    
    bot.send_message(
        message.chat.id,
        f"‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üëë –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã:\n{admin_list}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n" + "\n".join(admin_history[-3:]) if admin_history else "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏",
        reply_markup=markup,
        parse_mode='HTML'
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['addadmin'])
def add_admin_command(message):
    if message.from_user.id not in admins:
        bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤!")
        return
    
    try:
        if message.reply_to_message:
            new_admin = message.reply_to_message.from_user
            new_admin_id = new_admin.id
            new_admin_name = f"{new_admin.first_name} {new_admin.last_name}" if new_admin.last_name else new_admin.first_name
        else:
            args = message.text.split()
            if len(args) < 3:
                raise ValueError
            new_admin_id = int(args[1])
            new_admin_name = " ".join(args[2:])
        
        if new_admin_id in admins:
            bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω!")
            return
            
        admins[new_admin_id] = {
            "name": new_admin_name,
            "added_at": datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        
        history_entry = f"{datetime.now().strftime('%d.%m %H:%M')} - –î–æ–±–∞–≤–ª–µ–Ω {new_admin_name} (ID: {new_admin_id})"
        admin_history.append(history_entry)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É
        try:
            bot.send_message(
                new_admin_id,
                f"üéâ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/admin - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
                f"/addadmin [ID] [–ò–º—è] - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                f"/approve_[ID] - –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É"
            )
        except:
            pass
            
        bot.reply_to(message, f"‚úÖ {new_admin_name} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω!\n–ò—Å—Ç–æ—Ä–∏—è: {history_entry}")
        
    except ValueError:
        bot.reply_to(message, "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç:\n1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n2. –ò–ª–∏: /addadmin [ID] [–ò–º—è –§–∞–º–∏–ª–∏—è]")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@bot.message_handler(func=lambda m: m.text.startswith('/approve_'))
def approve_request(message):
    if message.from_user.id not in admins:
        return
    
    try:
        user_id = int(message.text.split('_')[1])
        if orders[user_id]['status'] == '–æ–∂–∏–¥–∞–µ—Ç':
            orders[user_id]['status'] = '–æ–¥–æ–±—Ä–µ–Ω–æ'
            
            with open(app_file, 'rb') as f:
                bot.send_document(
                    user_id,
                    f,
                    caption=f"üéÆ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admins[message.from_user.id]['name']}!</b>\n\n"
                           "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                           "1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª\n"
                           "2. –í–∫–ª—é—á–∏—Ç–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏'\n"
                           "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    parse_mode='HTML'
                )
            
            bot.reply_to(
                message,
                f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {orders[user_id]['name']} ({orders[user_id]['username']})"
            )
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
print(f"üëë –ê–¥–º–∏–Ω—ã: {admins}")
bot.polling()